AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the Fargate ECS Cluster.
Parameters:
  Stage:
    Type: String
    
  ContainerPort:
    Type: Number
   
  ImageURI:
    Type: String
  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Default: 'vpc-01a48c268970adfc5'
  SubnetA:
    Type: 'AWS::EC2::Subnet::Id'
    Default: 'subnet-02e1cbeda0e0c4e77'
  SubnetB:
    Type: 'AWS::EC2::Subnet::Id'
    Default: 'subnet-039e2afc7f99eb06f'
  DBHost:
    Type: String
    Default: 'wordpress.czvdcdaqk5qc.us-east-1.rds.amazonaws.com'
  DBPassword:
    Type: String
    NoEcho : 'true'
    Default: 'sdvof3rqbwfaksdjhgcbq43garwfsdc'   

Resources:
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Join 
        - '-'
        - - !Ref Stage
          - !Ref 'AWS::AccountId'
          - Cluster
  ExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join 
        - '-'
        - - !Ref Stage
          - !Ref 'AWS::AccountId'
          - ExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
  EFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable EFS access via port 2049
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref ContainerSecurityGroup
  FileSystemResource:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: ecs-efs
  MountTargetResource1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref SubnetA
      SecurityGroups:
        - !Ref EFSSecurityGroup
  MountTargetResource2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref SubnetB
      SecurityGroups:
        - !Ref EFSSecurityGroup
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: !Ref ExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
      Volumes:
        - Name: wp-content
          EFSVolumeConfiguration:
            FilesystemId: !Ref FileSystemResource
            TransitEncryption: ENABLED
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref Stage, !Ref 'AWS::AccountId', 'Container']]
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
          Environment: 
            - Name: DB_HOST
              Value: !Ref DBHost
            - Name: DB_PASSWORD
              Value: !Ref DBPassword
            - Name: DB_NAME
              Value: !Ref DBName                             
            - Name: DB_USER
              Value: !Ref DBUsername
          MountPoints: 
            - ContainerPath: /var/www/wp-content
              SourceVolume: wp-content       
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Join 
        - '-'
        - - !Ref Stage
          - !Ref 'AWS::AccountId'
          - LoadBalancerSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  ContainerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Join 
        - '-'
        - - !Ref Stage
          - !Ref 'AWS::AccountId'
          - ContainerSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      IpAddressType: ipv4
      Name: !Join 
        - '-'
        - - !Ref Stage
          - !Ref 'AWS::AccountId'
          - LoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      Type: application
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Join 
        - '-'
        - - !Ref Stage
          - !Ref 'AWS::AccountId'
          - TargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ECSService:
    Type: 'AWS::ECS::Service'
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Join 
        - '-'
        - - !Ref Stage
          - !Ref 'AWS::AccountId'
          - ECSService
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Join 
            - '-'
            - - !Ref Stage
              - !Ref 'AWS::AccountId'
              - Container
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup